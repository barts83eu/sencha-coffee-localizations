// Generated by CoffeeScript 1.3.3
(function() {

 // alert('jkdjkdkd');
  Ext.Loader.setPath({
    Ux: "../Ux"
  });

  // pettracker
  /**
  Ext.Loader.setConfig({
    enabled: true
  });*/



  Ext.require([
    "Ux.locale.Manager",
    "Ux.locale.override.st.Component"
    ]);

  Ext.application({
    name: "Locale",
    requires: [
    "Ext.MessageBox",
    "Ext.Ajax",
    "Ux.locale.override.st.Button",
    "Ux.locale.override.st.Container",
    "Ux.locale.override.st.TitleBar",
    "Ux.locale.override.st.field.Field",
    "Ux.locale.override.st.field.DatePicker",
    "Ux.locale.override.st.form.FieldSet",
    "Ux.locale.override.st.picker.Picker",
    "Ux.locale.override.st.picker.Date",
    // petfinder
    "Ext.data.proxy.JsonP"
    ],
    controllers: [
    "Main",
    "PetTracker"
    ],
    views: [
    "Main",
    // imported from petapp
    "PetPanel",
    "MapPanel",
    "RadiusPicker"
    ],
    icon: {
      57: "resources/icons/Icon.png",
      72: "resources/icons/Icon~ipad.png",
      114: "resources/icons/Icon@2x.png",
      144: "resources/icons/Icon~ipad@2x.png"
    },
    phoneStartupScreen: "resources/loading/Homescreen.jpg",
    tabletStartupScreen: "resources/loading/Homescreen~ipad.jpg",
    /**
      2 apps merged petfinder and Locales
    */
    launch: function() {


      // alert('pet finder');
      // petFinder
      var petList = {
            xtype: 'petListPanel'
        };
        var petMap = {
            xtype: 'petMap'
        };
        var radiusPicker = {
            xtype: 'radiusPicker'
        };



      // locale app

      Ux.locale.Manager.setConfig({
        ajaxConfig: {
          method: "GET"
        },
        language: "en",
        tpl: "../locales/{locale}.json",
        type: "ajax"
      });
      Ux.locale.Manager.init();
      Ext.fly("appLoadingIndicator").destroy();

      Ext.Viewport.add([petList, petMap, radiusPicker]);
      return Ext.Viewport.add(Ext.create("Locale.view.Main"));  // do we need to include this view if it wasnt created ?


    },
    onUpdated: function() {
      return Ext.Msg.confirm("Application Update", "This application has just successfully been updated to the latest version. Reload now?", function(buttonId) {
        if (buttonId === "yes") {
          return window.location.reload();
        }
      });
    },

    // Transitions
    slideLeftTransition: { type: 'slide', direction: 'left' },
    slideRightTransition: { type: 'slide', direction: 'right' },

    /**


    */
    onPetSelected: function (list, record) {
        var mapView = this.getPetMap();
        mapView.setRecord(record);
        Ext.Viewport.animateActiveItem(mapView, this.slideLeftTransition);
        this.renderMap(mapView, mapView.down("#petMap").getMap(), record.data);
    },

    /**


    */
    onBackButton: function () {
        console.log("Back to home");
        var store = Ext.getStore('PetTracker');
        store.getProxy().setUrl('http://nodetest-loutilities.rhcloud.com/dogtag/');
        store.load();
        Ext.Viewport.animateActiveItem(this.getPetListPanel(), this.slideRightTransition);
    },

    /**

    */
    onNear: function() {
        this.getRadiusPicker().show();
    },

    /**

    */
    onPickerRadiusChange: function(picker, pickerValue) {
        var store = Ext.getStore('PetTracker');
        var gmap = this.getPetMap().down("#petMap");
        var geo = gmap.getGeo();
        var g_marks = this.markers;
        store.getProxy().setUrl('http://nodetest-loutilities.rhcloud.com/dogtag/'
            + geo.getLongitude() + '/' + geo.getLatitude() + '/' + pickerValue["radius"]);
        store.load({
              callback: function (records, options, success) {
                  if (records.length > 0) {
                      Ext.each(records, function (record) {
                          var p = new google.maps.LatLng(record.data.latitude, record.data.longitude);
                          var m = new google.maps.Marker({
                              position: p,
                              title: record.data.name + "'s Location",
                              animation: google.maps.Animation.DROP,
                              map: gmap.getMap()
                              //  icon: 'resources/img/brown_markerD.png'
                          });
                          g_marks.push(m);
                      });
                  }
              }
        });
    },

    /**

    */
    renderMap: function (extmap, map, record) {
        // erase old markers
        if (this.markers.length > 0) {
            Ext.each(this.markers, function (marker) {
                marker.setMap(null);
            });
        }

        var position = new google.maps.LatLng(record.latitude, record.longitude);

        var dynaMarker = new google.maps.Marker({
            position: position,
            title: record.name + "'s Location",
            map: map,
            icon: 'resources/img/yellow_MarkerB.png'
        });

        this.markers.push(dynaMarker);

        var infowindow = new google.maps.InfoWindow({
            content: "We've found your dog sniffing flowers!"
        });

        google.maps.event.addListener(dynaMarker, 'click', function () {
            infowindow.open(map, dynaMarker);
        });

        setTimeout(function () {
            map.panTo(position);
        }, 1000);

        var geo = extmap.down("#petMap").getGeo();
        var currentPosition = new google.maps.LatLng(geo.getLatitude(), geo.getLongitude());
        this.plotRoute(map, currentPosition, position);

        // stop updates to center
        geo.suspendUpdates();
    },

    /**
      google api
    */
    plotRoute: function (map, orig, dest) {
        this.directionsDisplay.setMap(map);

        var dd = this.directionsDisplay;

        var selectedMode = "WALKING"; // DRIVING, WALKING, BICYCLING
        var request = {
            origin: orig,
            destination: dest,
            travelMode: google.maps.TravelMode[selectedMode]
        };
        this.directionsService.route(request, function (response, status) {
            if (status === google.maps.DirectionsStatus.OK) {
                dd.setDirections(response);
            }
        });

    }

  });

}).call(this);
